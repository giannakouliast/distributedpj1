https://pastebin.com/SUBsV070

public class Calculator {
  
    interface IntegerMath {
        int operation(int a, int b);   
    }
  
    public int operateBinary(int a, int b, IntegerMath op) {
        return op.operation(a, b);
    }
 
    public static void main(String... args) {


        Calculator myApp = new Calculator();
        IntegerMath addition = (a, b) -> a + b;
        IntegerMath subtraction = (a, b) -> a - b;
        System.out.println("40 + 2 = " +
            myApp.operateBinary(40, 2, addition));
        System.out.println("20 - 10 = " +
            myApp.operateBinary(20, 10, subtraction));    
    }
} 








import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class MapReduce {

    /**
     * @param args
     */
    public static void main(String[] args) {
        double counted;

        List<Paragraph> paragraphs = new ArrayList<>();

         paragraphs.add(
        		new Paragraph(Arrays.asList(
        		new Line("first test"),
                new Line("map test"), new Line("test test"),
                new Line("map reduce"))));

         paragraphs.add(new Paragraph(Arrays.asList(
        		 new Line("first test"), new Line("map test"),
                new Line("map reduce"))));

        counted = paragraphs.stream().filter(p ->
        p.contains("test"))
        .map(p -> p.count("test")).reduce(0,(sum, p) ->
        {return sum + p;});

        System.out.println(counted);}}







public class Line {

	String line;

	public Line(String l) {
		this.line = l;
	}

	public String getLine() {
		return line;
	}

	public String toString() {
		return line;
	}

	public double count(String string) {
		int count = 0;
		System.out.println("line to count: " + line);
		for (String w : line.split(" ")) {
			if (w.equalsIgnoreCase(string))
				count++;
		}
		return count;
	}

}









import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Paragraph {

    List<Line> lines;


    public Paragraph(List<Line> lines) {
        this.lines = lines;
    }

    public List<Line> getLines() {
        return lines;
    }

    public void setLines(List<Line> lines) {
        this.lines = lines;
    }


    public int count(String text){
        int count=0;
        for (Line line : lines) {

            count+=line.count(text);
        }
        return count;
    }

    public boolean contains(String test) {
      Stream<Line> result=   lines.parallelStream()
    		  .filter(p -> p.getLine().contains(test));
        lines = result.collect(Collectors.toList());

    if (lines.size()>0)
        return true;
        else
        return false;
    }
}